// Code generated by counterfeiter. DO NOT EDIT.
package containerstorefakes

import (
	"sync"

	"code.cloudfoundry.org/executor"
	"code.cloudfoundry.org/executor/depot/containerstore"
	"code.cloudfoundry.org/lager"
)

type FakeProxyManager struct {
	CreateDirStub        func(logger lager.Logger, container executor.Container) (containerstore.CredentialConfiguration, error)
	createDirMutex       sync.RWMutex
	createDirArgsForCall []struct {
		logger    lager.Logger
		container executor.Container
	}
	createDirReturns struct {
		result1 containerstore.CredentialConfiguration
		result2 error
	}
	createDirReturnsOnCall map[int]struct {
		result1 containerstore.CredentialConfiguration
		result2 error
	}
	RemoveDirStub        func(logger lager.Logger, container executor.Container) error
	removeDirMutex       sync.RWMutex
	removeDirArgsForCall []struct {
		logger    lager.Logger
		container executor.Container
	}
	removeDirReturns struct {
		result1 error
	}
	removeDirReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateStub        func(credentials containerstore.Credential, container executor.Container) error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		credentials containerstore.Credential
		container   executor.Container
	}
	updateReturns struct {
		result1 error
	}
	updateReturnsOnCall map[int]struct {
		result1 error
	}
	CloseStub        func(invalidCredentials containerstore.Credential, container executor.Container) error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
		invalidCredentials containerstore.Credential
		container          executor.Container
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	ProxyPortsStub        func(lager.Logger, *executor.Container) ([]executor.ProxyPortMapping, []uint16)
	proxyPortsMutex       sync.RWMutex
	proxyPortsArgsForCall []struct {
		arg1 lager.Logger
		arg2 *executor.Container
	}
	proxyPortsReturns struct {
		result1 []executor.ProxyPortMapping
		result2 []uint16
	}
	proxyPortsReturnsOnCall map[int]struct {
		result1 []executor.ProxyPortMapping
		result2 []uint16
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProxyManager) CreateDir(logger lager.Logger, container executor.Container) (containerstore.CredentialConfiguration, error) {
	fake.createDirMutex.Lock()
	ret, specificReturn := fake.createDirReturnsOnCall[len(fake.createDirArgsForCall)]
	fake.createDirArgsForCall = append(fake.createDirArgsForCall, struct {
		logger    lager.Logger
		container executor.Container
	}{logger, container})
	fake.recordInvocation("CreateDir", []interface{}{logger, container})
	fake.createDirMutex.Unlock()
	if fake.CreateDirStub != nil {
		return fake.CreateDirStub(logger, container)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createDirReturns.result1, fake.createDirReturns.result2
}

func (fake *FakeProxyManager) CreateDirCallCount() int {
	fake.createDirMutex.RLock()
	defer fake.createDirMutex.RUnlock()
	return len(fake.createDirArgsForCall)
}

func (fake *FakeProxyManager) CreateDirArgsForCall(i int) (lager.Logger, executor.Container) {
	fake.createDirMutex.RLock()
	defer fake.createDirMutex.RUnlock()
	return fake.createDirArgsForCall[i].logger, fake.createDirArgsForCall[i].container
}

func (fake *FakeProxyManager) CreateDirReturns(result1 containerstore.CredentialConfiguration, result2 error) {
	fake.CreateDirStub = nil
	fake.createDirReturns = struct {
		result1 containerstore.CredentialConfiguration
		result2 error
	}{result1, result2}
}

func (fake *FakeProxyManager) CreateDirReturnsOnCall(i int, result1 containerstore.CredentialConfiguration, result2 error) {
	fake.CreateDirStub = nil
	if fake.createDirReturnsOnCall == nil {
		fake.createDirReturnsOnCall = make(map[int]struct {
			result1 containerstore.CredentialConfiguration
			result2 error
		})
	}
	fake.createDirReturnsOnCall[i] = struct {
		result1 containerstore.CredentialConfiguration
		result2 error
	}{result1, result2}
}

func (fake *FakeProxyManager) RemoveDir(logger lager.Logger, container executor.Container) error {
	fake.removeDirMutex.Lock()
	ret, specificReturn := fake.removeDirReturnsOnCall[len(fake.removeDirArgsForCall)]
	fake.removeDirArgsForCall = append(fake.removeDirArgsForCall, struct {
		logger    lager.Logger
		container executor.Container
	}{logger, container})
	fake.recordInvocation("RemoveDir", []interface{}{logger, container})
	fake.removeDirMutex.Unlock()
	if fake.RemoveDirStub != nil {
		return fake.RemoveDirStub(logger, container)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.removeDirReturns.result1
}

func (fake *FakeProxyManager) RemoveDirCallCount() int {
	fake.removeDirMutex.RLock()
	defer fake.removeDirMutex.RUnlock()
	return len(fake.removeDirArgsForCall)
}

func (fake *FakeProxyManager) RemoveDirArgsForCall(i int) (lager.Logger, executor.Container) {
	fake.removeDirMutex.RLock()
	defer fake.removeDirMutex.RUnlock()
	return fake.removeDirArgsForCall[i].logger, fake.removeDirArgsForCall[i].container
}

func (fake *FakeProxyManager) RemoveDirReturns(result1 error) {
	fake.RemoveDirStub = nil
	fake.removeDirReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProxyManager) RemoveDirReturnsOnCall(i int, result1 error) {
	fake.RemoveDirStub = nil
	if fake.removeDirReturnsOnCall == nil {
		fake.removeDirReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeDirReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProxyManager) Update(credentials containerstore.Credential, container executor.Container) error {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		credentials containerstore.Credential
		container   executor.Container
	}{credentials, container})
	fake.recordInvocation("Update", []interface{}{credentials, container})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(credentials, container)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.updateReturns.result1
}

func (fake *FakeProxyManager) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeProxyManager) UpdateArgsForCall(i int) (containerstore.Credential, executor.Container) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.updateArgsForCall[i].credentials, fake.updateArgsForCall[i].container
}

func (fake *FakeProxyManager) UpdateReturns(result1 error) {
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProxyManager) UpdateReturnsOnCall(i int, result1 error) {
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProxyManager) Close(invalidCredentials containerstore.Credential, container executor.Container) error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
		invalidCredentials containerstore.Credential
		container          executor.Container
	}{invalidCredentials, container})
	fake.recordInvocation("Close", []interface{}{invalidCredentials, container})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub(invalidCredentials, container)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.closeReturns.result1
}

func (fake *FakeProxyManager) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeProxyManager) CloseArgsForCall(i int) (containerstore.Credential, executor.Container) {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return fake.closeArgsForCall[i].invalidCredentials, fake.closeArgsForCall[i].container
}

func (fake *FakeProxyManager) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProxyManager) CloseReturnsOnCall(i int, result1 error) {
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProxyManager) ProxyPorts(arg1 lager.Logger, arg2 *executor.Container) ([]executor.ProxyPortMapping, []uint16) {
	fake.proxyPortsMutex.Lock()
	ret, specificReturn := fake.proxyPortsReturnsOnCall[len(fake.proxyPortsArgsForCall)]
	fake.proxyPortsArgsForCall = append(fake.proxyPortsArgsForCall, struct {
		arg1 lager.Logger
		arg2 *executor.Container
	}{arg1, arg2})
	fake.recordInvocation("ProxyPorts", []interface{}{arg1, arg2})
	fake.proxyPortsMutex.Unlock()
	if fake.ProxyPortsStub != nil {
		return fake.ProxyPortsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.proxyPortsReturns.result1, fake.proxyPortsReturns.result2
}

func (fake *FakeProxyManager) ProxyPortsCallCount() int {
	fake.proxyPortsMutex.RLock()
	defer fake.proxyPortsMutex.RUnlock()
	return len(fake.proxyPortsArgsForCall)
}

func (fake *FakeProxyManager) ProxyPortsArgsForCall(i int) (lager.Logger, *executor.Container) {
	fake.proxyPortsMutex.RLock()
	defer fake.proxyPortsMutex.RUnlock()
	return fake.proxyPortsArgsForCall[i].arg1, fake.proxyPortsArgsForCall[i].arg2
}

func (fake *FakeProxyManager) ProxyPortsReturns(result1 []executor.ProxyPortMapping, result2 []uint16) {
	fake.ProxyPortsStub = nil
	fake.proxyPortsReturns = struct {
		result1 []executor.ProxyPortMapping
		result2 []uint16
	}{result1, result2}
}

func (fake *FakeProxyManager) ProxyPortsReturnsOnCall(i int, result1 []executor.ProxyPortMapping, result2 []uint16) {
	fake.ProxyPortsStub = nil
	if fake.proxyPortsReturnsOnCall == nil {
		fake.proxyPortsReturnsOnCall = make(map[int]struct {
			result1 []executor.ProxyPortMapping
			result2 []uint16
		})
	}
	fake.proxyPortsReturnsOnCall[i] = struct {
		result1 []executor.ProxyPortMapping
		result2 []uint16
	}{result1, result2}
}

func (fake *FakeProxyManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createDirMutex.RLock()
	defer fake.createDirMutex.RUnlock()
	fake.removeDirMutex.RLock()
	defer fake.removeDirMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.proxyPortsMutex.RLock()
	defer fake.proxyPortsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProxyManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ containerstore.ProxyManager = new(FakeProxyManager)
